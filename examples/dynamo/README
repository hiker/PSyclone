# -----------------------------------------------------------------------------
# BSD 3-Clause License
#
# Copyright (c) 2017-2018, Science and Technology Facilities Council
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------
# Author A. R. Porter, STFC Daresbury Lab
# Modified by R. W. Ford, STFC Daresbury Lab
# Modified by I. Kavcic, Met Office
# -----------------------------------------------------------------------------

Examples 1 and 2 - Dynamo 0.1 API
---------------------------------

The dynamo examples in the eg1 and eg2 directories below the one
containing this README use the Dynamo 0.1 API. Those in eg3 - eg10 use
version 0.3 of the Dynamo API. They are primarily provided to
illustrate the use of the PSyclone code-generation system. No guarantee
is made as to their functional correctness or usefulness (i.e. the
calculations that they perform may often be nonsensical - it is the use
of PSyclone that is being illustrated).

These examples assume that you have PSyclone installed. The easiest
way to do this is via pip, e.g. `pip install psyclone`. See the user
manual for more details (../../psyclone.pdf or
http://psyclone.readthedocs.io/en/stable/). After doing this `psyclone`
should be on your PATH.

PSyclone can be run for the first two examples by entering the directory and 
executing, e.g.
::
    python ./runme.py

Examine the runme*.py scripts themselves for further details.

Example 3
---------

The third example can be used to demonstrate PSyclone:

1) generating distributed memory parallel code
::
    cd eg3/
    psyclone solver_mod.x90
    # look for %set_dirty and %halo_exchange in the generated code

2) using a transformation script to perform loop colouring and OpenMP
parallelisation, either with distributed memory parallel code:
::
    cd eg3/
    psyclone -s ./colouring_and_omp.py solver_mod.x90

or without distributed memory parallel code:
::
    cd eg3/
    psyclone -s ./colouring_and_omp.py -nodm solver_mod.x90

Example 4
---------

The fourth example illustrates the use of (multiple) calls to built-in
operations within an invoke as well as the use of the name="..." argument.
It also includes the use of the enforce_bc_kernel_type kernel to apply
boundary conditions.
::
    cd eg4/
    psyclone solver_mod.x90

Example 5
---------

The fifth example illustrates the use of stencils in kernels and the associated
passing of extent and direction information (where appropriate) from the
algorithm layer.
::
    cd eg5/
    psyclone alg.f90

Example 6
---------

The sixth example illustrates the use and implementation of
reductions. It also demonstrates the generation of a schedule's
dependence graph in svg format (see dag.svg). Note, that if graphviz
and its Python bindings are not installed then no dag image will be
generated and the dag method will silently return. The example may be
run sequentially:
::
    cd eg6/ python
    psyclone -nodm alg.x90

code parallelised with MPI:
::
    cd eg6/
    psyclone alg.x90

code parallelised with OpenMP (and loop fused)
::
    cd eg6/
    psyclone -nodm -s ./omp_script.py alg.x90

or code parallelised with both MPI and OpenMP (and loop fused)
::
    cd eg6/
    psyclone -s ./omp_script.py alg.x90

By default the OpenMP implementations make use of the OpenMP reduction
support. OpenMP reductions do not guarantee the same results from one
run to the next for runs with the same number of OpenMP
threads. Therefore a "reprod" option has been added to the OpenMP do
loop transformation which implements a manual reduction that provides
the same results from one run to the next when using the same number
of threads
::
    cd eg6/
    psyclone -s ./omp_reprod_script.py alg.x90

Example 7: Column-Matrix Assembly Operators
-------------------------------------------

The seventh example illustrates the use of PSyclone with kernels that
perform operations with column-wise (Column-Matrix Assembly) operators:
::
    cd eg7/
    psyclone alg.x90

Example 8: Redundant Computation
--------------------------------

The eighth example illustrates the use of redundant computation to
remove and/or change the location and depth of halo exchanges:
::
    cd eg8/
    psyclone helmholtz_solver_alg_mod.x90 -s ./redundant_script.py

Example 9: Writing to Discontinuous Fields
------------------------------------------

The ninth example illustrates the behaviour of discontinuous field writers
and readwriters:
::
    cd eg9/
    psyclone advective_inc_alg_mod.x90

This example also demonstrates how to write a PSyclone transformation
script that only colours loops over continuous spaces:
::
    cd eg9/
    psyclone -s ./colouring_and_omp.py -nodm advective_inc_alg_mod.x90

Example 10: Inter-grid Kernels
------------------------------

PSyclone supports so-called 'inter-grid' kernels that map a field (or field
vector) from a coarse mesh onto a fine mesh (prolongation) or from a fine
mesh onto a coarse mesh (restriction). eg10 contains an example algorithm
that takes a field on a fine mesh and restricts it twice before undoing
that by prolonging it twice:
::
    cd eg10/
    psyclone intergrid_3levels.x90
