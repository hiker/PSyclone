# -----------------------------------------------------------------------------
# BSD 3-Clause License
#
# Copyright (c) 2018, Science and Technology Facilities Council
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------
# Author J. Henrichs, Bureau of Meteorology
# -----------------------------------------------------------------------------

''' This module provides support for adding profiling to code
    generated by PSyclone. '''

from __future__ import absolute_import
from psyclone.f2pygen import CallGen, TypeDeclGen, UseGen
from psyclone.psyGen import colored, GenerationError, Kern, NameSpace, \
     NameSpaceFactory, Node, SCHEDULE_COLOUR_MAP


class Profiler(object):
    ''' This class wraps all profiling related settings.'''

    # Command line option to use for the various profiling options
    # INVOKES: Automatically add a region for each invoke. i.e. at
    #          the start and end of each PSyclone created subroutine.
    # KERNELS: Automatically add a profile region around every
    #          kernel call including the loop structure created.
    INVOKES = "invokes"
    KERNELS = "kernels"
    SUPPORTED_OPTIONS = [INVOKES, KERNELS]
    _options = []
    # A namespace manager to make sure we get unique region names
    _namespace = NameSpace()

    # -------------------------------------------------------------------------
    @staticmethod
    def set_options(options):
        '''Sets the option the user required.
        :param options: List of options selected by the user, or None to
                        disable all automatic profiling.
        :type options: List of strings.
        :raises GenerationError: If any option is not KERNELS or INVOKES.
        '''
        # Test that all options are valid
        if options is None:
            options = []   # Makes it easier to test
        for index, option in enumerate(options):
            if option not in [Profiler.INVOKES, Profiler.KERNELS]:
                raise GenerationError("Invalid option {0} as parameter {1}"
                                      .format(option, index))

        # Store options so they can be queried later
        Profiler._options = options

    # -------------------------------------------------------------------------
    @staticmethod
    def profile_kernels():
        '''Returns true if kernel profiling is enabled.
        :return: True if kernels should be profiled.
        :rtype: bool'''
        return Profiler.KERNELS in Profiler._options

    # -------------------------------------------------------------------------
    @staticmethod
    def profile_invokes():
        '''Returns true if invoke profiling is enabled.
        :return: True if invokes should be profiled.
        :rtype: bool'''
        return Profiler.INVOKES in Profiler._options

    # -------------------------------------------------------------------------
    @staticmethod
    def add_profile_nodes(schedule, loop_class):
        '''This function inserts all required Profiling Nodes (for invokes
        and kernels, as specified on the command line) into a schedule.
        :param schedule: The schedule to instrument.
        :type schedule: :py::class::`psyclone.psyGen.Schedule` or derived class
        :param loop_class: The loop class (e.g. GOLoop, DynLoop) to instrument.
        :type loop_class: :py::class::`psyclone.psyGen.Loop` or derived class.
        '''

        from psyclone.transformations import ProfileRegionTrans
        if Profiler.profile_kernels():
            profile_trans = ProfileRegionTrans()
            for i in schedule.children:
                if isinstance(i, loop_class):
                    profile_trans.apply(i)
        if Profiler.profile_invokes():
            profile_trans = ProfileRegionTrans()
            profile_trans.apply(schedule.children)

    # -------------------------------------------------------------------------
    @staticmethod
    def create_unique_region(name):
        '''This function makes sure that region names are unique even if
        the same kernel is called.
        :param str name: The name of a region (usually kernel name).
        :return str: A unique name based on the parameter name.
        '''
        return Profiler._namespace.create_name(name)


# =============================================================================
class ProfileNode(Node):
    '''This class can be inserted into a schedule to create profiling code.
    '''

    def __init__(self, children=None, parent=None):
        '''Constructor for a ProfileNode that is inserted in a schedule.
        Parameters:
            :param children: A list of children nodes for this node.
            :type children: A list of :py::class::`psyclone.psyGen.Node` \
            or derived classes.
            :param parent: The parent of this node.
            :type parent: A :py::class::`psyclone.psyGen.Node`.
        '''
        Node.__init__(self, children=children, parent=parent)
        self._namespace = NameSpace()

    # -------------------------------------------------------------------------
    def __str__(self):
        ''' Returns a name for the ProfileNode. '''
        return "Profile"

    # -------------------------------------------------------------------------
    @property
    def coloured_text(self):
        '''
        Return text containing the (coloured) name of this node type

        :return: the name of this node type, possibly with control codes
                 for colour
        :rtype: string
        '''
        return colored("Profile", SCHEDULE_COLOUR_MAP["Profile"])

    # -------------------------------------------------------------------------
    def view(self, indent=0):
        '''Class specific view function to print the tree. '''
        # pylint: disable=arguments-differ
        print self.indent(indent) + self.coloured_text
        for entity in self._children:
            entity.view(indent=indent + 1)

    # -------------------------------------------------------------------------
    def gen_code(self, parent):
        # pylint: disable=arguments-differ
        '''Creates the profile start and end calls, surrounding the children
        of this node.
        :param parent: The parent of this node.
        :type parent: :py:class:`psyclone.psyGen.Node`.'''

        # Find the first kernel and use its name. In plain PSyclone there
        # should be only one kernel, but if Profile is invoked after e.g.
        # a loop merge more kernels might be there
        region_name = "unknown-kernel"
        module_name = "unknown-module"
        for kernel in self.walk(self.children, Kern):
            region_name = kernel.name
            module_name = kernel.module_name
            break

        region_name = Profiler.create_unique_region(region_name)

        # Note that adding a use statement makes sure it is only
        # added once, so we don't need to test this here!
        use = UseGen(parent, "profile_mod", only=True,
                     funcnames=["ProfileData, ProfileStart, ProfileEnd"])
        parent.add(use)
        profile_name = NameSpaceFactory().create().create_name("profile")
        prof_var_decl = TypeDeclGen(parent, datatype="ProfileData",
                                    entity_decls=[profile_name],
                                    attrspec=["save"])
        parent.add(prof_var_decl)

        prof_start = CallGen(parent, "ProfileStart",
                             ["\"{0}\"".format(module_name),
                              "\"{0}\"".format(region_name),
                              profile_name])
        parent.add(prof_start)

        for child in self.children:
            child.gen_code(parent)

        prof_end = CallGen(parent, "ProfileEnd",
                           [profile_name])
        parent.add(prof_end)
